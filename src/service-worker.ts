/// <reference lib="webworker" />
// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.
import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate } from 'workbox-strategies'

declare const self: ServiceWorkerGlobalScope

// Take control of all clients immediately
clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    }

    // Return true to signal that we want to use the handler.
    return true
  },
  createHandlerBoundToURL(`${import.meta.env.BASE_URL}index.html`),
)

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
)

// Enhanced message handling for skipWaiting and update management
self.addEventListener('message', (event) => {
  const { ports, data } = event

  if (!data || !data.type) {
    return
  }

  console.log('Service Worker: Received message:', data.type)

  if (data.type === 'SKIP_WAITING') {
    const replyPort = ports?.[0]

    if (replyPort) {
      // Handle with MessageChannel for better communication
      event.waitUntil(
        self.skipWaiting().then(
          () => {
            console.log('Service Worker: Skip waiting successful')
            replyPort.postMessage({ error: null, success: true })
          },
          (error) => {
            console.error('Service Worker: Skip waiting failed:', error)
            replyPort.postMessage({ error: error.message, success: false })
          },
        ),
      )
    } else {
      // Fallback for direct skipWaiting call
      console.log('Service Worker: Executing skipWaiting immediately')
      self.skipWaiting()
    }
  }

  // Handle other message types if needed
  if (data.type === 'GET_VERSION') {
    const replyPort = ports?.[0]
    if (replyPort) {
      // Send back current service worker version or timestamp
      replyPort.postMessage({
        version: '1.1.0', // You can make this dynamic based on build
        timestamp: Date.now(),
        success: true,
      })
    }
  }
})

// Enhanced install event with better caching strategy
self.addEventListener('install', (_event) => {
  console.log('Service Worker: Installing new version')

  // Skip waiting immediately if this is an update
  if (self.registration?.waiting) {
    console.log('Service Worker: Skipping waiting during install')
    self.skipWaiting()
  }
})

// Enhanced activate event with cleanup and immediate control
self.addEventListener('activate', (event) => {
  console.log('Service Worker: Activating new version')

  event.waitUntil(
    Promise.all([
      // Clean up old caches
      caches.keys().then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            // Keep current workbox caches, remove old ones
            if (
              cacheName.startsWith('workbox-') &&
              !cacheName.includes('temp')
            ) {
              // You might want to implement more sophisticated cache cleanup logic
              console.log('Service Worker: Keeping cache:', cacheName)
              return Promise.resolve()
            }
            return Promise.resolve()
          }),
        )
      }),
      // Take control of all clients immediately
      self.clients.claim().then(() => {
        console.log('Service Worker: Claimed all clients')

        // Notify all clients that the service worker has been updated
        return self.clients.matchAll().then((clients) => {
          clients.forEach((client) => {
            client.postMessage({
              type: 'SW_UPDATED',
              timestamp: Date.now(),
            })
          })
        })
      }),
    ]),
  )
})

// Handle unhandled promise rejections
self.addEventListener('unhandledrejection', (_event) => {
  console.error('Service Worker: Unhandled promise rejection:', _event.reason)
})

// Add performance logging for cache hits/misses
self.addEventListener('fetch', (event) => {
  // Only log for navigation requests in development
  if (
    event.request.mode === 'navigate' &&
    self.location.hostname === 'localhost'
  ) {
    console.log('Service Worker: Navigation request for:', event.request.url)
  }
})

console.log('Service Worker: Script loaded and ready')
