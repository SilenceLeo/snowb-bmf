{"version":3,"sources":["../node_modules/workbox-core/_version.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/registerQuotaErrorCallback.js","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","../node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../node_modules/workbox-core/_private/dontWaitFor.js","../node_modules/workbox-core/_private/Deferred.js","../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../node_modules/workbox-core/_private/getFriendlyURL.js","../node_modules/workbox-core/_private/timeout.js","../node_modules/workbox-core/_private/waitUntil.js","../node_modules/workbox-core/copyResponse.js","../node_modules/workbox-core/clientsClaim.js","../node_modules/idb/build/wrap-idb-value.js","../node_modules/idb/build/index.js","../node_modules/workbox-expiration/_version.js","../node_modules/workbox-expiration/models/CacheTimestampsModel.js","../node_modules/workbox-expiration/CacheExpiration.js","../node_modules/workbox-expiration/ExpirationPlugin.js","../node_modules/workbox-precaching/_version.js","../node_modules/workbox-precaching/utils/createCacheKey.js","../node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","../node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","../node_modules/workbox-strategies/_version.js","../node_modules/workbox-strategies/StrategyHandler.js","../node_modules/workbox-strategies/Strategy.js","../node_modules/workbox-precaching/PrecacheStrategy.js","../node_modules/workbox-precaching/PrecacheController.js","../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../node_modules/workbox-routing/_version.js","../node_modules/workbox-routing/utils/constants.js","../node_modules/workbox-routing/utils/normalizeHandler.js","../node_modules/workbox-routing/Route.js","../node_modules/workbox-routing/RegExpRoute.js","../node_modules/workbox-routing/Router.js","../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../node_modules/workbox-routing/registerRoute.js","../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../node_modules/workbox-precaching/utils/generateURLVariations.js","../node_modules/workbox-precaching/PrecacheRoute.js","../node_modules/workbox-precaching/addRoute.js","../node_modules/workbox-precaching/createHandlerBoundToURL.js","../node_modules/workbox-precaching/precache.js","../node_modules/workbox-precaching/precacheAndRoute.js","../node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","../node_modules/workbox-strategies/StaleWhileRevalidate.js","../src/service-worker.ts"],"names":["e","fallback","code","args","msg","messageGenerator","WorkboxError","errorCode","details","message","quotaErrorCallbacks","registerQuotaErrorCallback","callback","_cacheNameDetails","_createCacheName","cacheName","value","eachCacheNameDetail","fn","key","cacheNames","userCacheName","stripParams","fullURL","ignoreParams","strippedURL","param","cacheMatchIgnoreParams","cache","request","matchOptions","__async","strippedRequestURL","keysOptions","cacheKeys","cacheKey","strippedCacheKeyURL","supportStatus","canConstructResponseFromBodyStream","testResponse","error","dontWaitFor","promise","Deferred","resolve","reject","executeQuotaErrorCallbacks","getFriendlyURL","url","timeout","ms","waitUntil","event","asyncFn","returnPromise","copyResponse","response","modifier","origin","clonedResponse","modifiedResponseInit","body","clientsClaim","instanceOfAny","object","constructors","c","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","getCursorAdvanceMethods","cursorRequestMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","unlisten","success","wrap","cacheDonePromiseForTransaction","tx","done","complete","idbProxyTraps","target","prop","receiver","replaceTraps","wrapFunction","func","storeNames","unwrap","transformCachableValue","newValue","openDB","name","version","blocked","upgrade","blocking","terminated","openPromise","db","deleteDB","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","method","storeName","oldTraps","__spreadProps","__spreadValues","DB_NAME","CACHE_OBJECT_STORE","normalizeURL","unNormalizedUrl","CacheTimestampsModel","objStore","timestamp","entry","minTimestamp","maxCount","cursor","entriesToDelete","entriesNotDeletedCount","result","urlsDeleted","CacheExpiration","config","urlsExpired","expireOlderThan","ExpirationPlugin","_0","cachedResponse","isFresh","cacheExpiration","updateTimestampDone","dateHeaderTimestamp","now","dateHeader","headerTime","REVISION_SEARCH_PARAM","createCacheKey","urlObject","revision","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","state","PrecacheCacheKeyPlugin","precacheController","params","toRequest","input","StrategyHandler","strategy","options","plugin","possiblePreloadResponse","originalRequest","cb","err","pluginFilteredRequest","fetchResponse","responseClone","effectiveRequest","multiMatchOptions","responseToCache","hasCacheUpdateCallback","oldResponse","mode","statefulParam","pluginsUsed","Strategy","responseDone","handler","handlerDone","waitUntilError","PrecacheStrategy","integrityInManifest","integrityInRequest","noIntegrityConflict","defaultPluginIndex","cacheWillUpdatePluginCount","index","PrecacheController","plugins","fallbackToNetwork","entries","urlsToWarnAbout","cacheMode","warningMessage","installReportPlugin","integrity","updatedURLs","notUpdatedURLs","currentlyCachedRequests","expectedCacheKeys","deletedURLs","getOrCreatePrecacheController","defaultMethod","normalizeHandler","Route","match","RegExpRoute","regExp","Router","responsePromise","payload","requestPromises","sameOrigin","route","catchHandler","catchErr","routes","matchResult","routeIndex","defaultRouter","getOrCreateDefaultRouter","registerRoute","capture","captureUrl","matchCallback","removeIgnoredSearchParams","ignoreURLParametersMatching","paramName","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","directoryURL","cleanURL","additionalURLs","urlToAttempt","PrecacheRoute","urlsToCacheKeys","possibleURL","addRoute","precacheRoute","createHandlerBoundToURL","precache","precacheAndRoute","cacheOkAndOpaquePlugin","StaleWhileRevalidate","p","fetchAndCachePromise","fileExtensionRegexp","ports","data","replyPort","_event","_a","clients","client"],"mappings":"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","file":"service-worker.js","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof workbox-core\n */\n// Can't change Function type\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    void promise.then(() => { });\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db\n            .transaction(CACHE_OBJECT_STORE)\n            .store.index('timestamp')\n            .openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds\n            ? Date.now() - this._maxAgeSeconds * 1000\n            : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ? 'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n            return timestamp !== undefined ? timestamp < expireOlderThan : true;\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached response is used or updated, this plugin will look\n * at the associated cache and remove any old or extra responses.\n *\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached response has been used. If the response has a \"Date\" header, then\n * a light weight expiration check is performed and the response will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {ExpirationPluginOptions} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse, }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request, }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cachedResponseWillBeUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#createHandlerBoundToURL} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call the\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\n * instead of using this function.\n *\n * @param {string} url The precached URL which will be used to lookup the\n * `Response`.\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n * response from the network if there's a precache miss.\n * @return {workbox-routing~handlerCallback}\n *\n * @memberof workbox-precaching\n */\nfunction createHandlerBoundToURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.createHandlerBoundToURL(url);\n}\nexport { createHandlerBoundToURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate)\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = (await fetchAndCachePromise);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n","/// <reference lib=\"webworker\" />\n// This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\nimport { clientsClaim } from 'workbox-core'\nimport { ExpirationPlugin } from 'workbox-expiration'\nimport { createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching'\nimport { registerRoute } from 'workbox-routing'\nimport { StaleWhileRevalidate } from 'workbox-strategies'\n\ndeclare const self: ServiceWorkerGlobalScope\n\n// Take control of all clients immediately\nclientsClaim()\n\n// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST)\n\n// Set up App Shell-style routing for React app routes only\n// This excludes static pages managed by other programs\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$')\nregisterRoute(\n  // Return false to exempt requests from being fulfilled by index.html.\n  ({ request, url }: { request: Request; url: URL }) => {\n    // If this isn't a navigation, skip.\n    if (request.mode !== 'navigate') {\n      return false\n    }\n\n    // If this is a URL that starts with /_, skip.\n    if (url.pathname.startsWith('/_')) {\n      return false\n    }\n\n    // Skip static pages - only handle root and React app routes\n    // Allow other static pages (e.g., /en/, /docs/, etc.) to be served normally\n    if (url.pathname !== '/' && !url.pathname.startsWith('/?')) {\n      // If this is a static page path, let it pass through\n      return false\n    }\n\n    // If this looks like a URL for a resource, because it contains\n    // a file extension, skip.\n    if (url.pathname.match(fileExtensionRegexp)) {\n      return false\n    }\n\n    // Only handle root path and query parameters for React app\n    return true\n  },\n  createHandlerBoundToURL(`${import.meta.env.BASE_URL}index.html`),\n)\n\n// An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\nregisterRoute(\n  // Add in any other file extensions or routing criteria as needed.\n  ({ url }) =>\n    url.origin === self.location.origin && url.pathname.endsWith('.png'),\n  // Customize this strategy as needed, e.g., by changing to CacheFirst.\n  new StaleWhileRevalidate({\n    cacheName: 'images',\n    plugins: [\n      // Ensure that once this runtime cache reaches a maximum size the\n      // least-recently used images are removed.\n      new ExpirationPlugin({ maxEntries: 50 }),\n    ],\n  }),\n)\n\n// Enhanced message handling for skipWaiting and update management\nself.addEventListener('message', (event) => {\n  const { ports, data } = event\n\n  if (!data || !data.type) {\n    return\n  }\n\n  console.log('Service Worker: Received message:', data.type)\n\n  if (data.type === 'SKIP_WAITING') {\n    const replyPort = ports?.[0]\n\n    if (replyPort) {\n      // Handle with MessageChannel for better communication\n      event.waitUntil(\n        self.skipWaiting().then(\n          () => {\n            console.log('Service Worker: Skip waiting successful')\n            replyPort.postMessage({ error: null, success: true })\n          },\n          (error) => {\n            console.error('Service Worker: Skip waiting failed:', error)\n            replyPort.postMessage({ error: error.message, success: false })\n          },\n        ),\n      )\n    } else {\n      // Fallback for direct skipWaiting call\n      console.log('Service Worker: Executing skipWaiting immediately')\n      self.skipWaiting()\n    }\n  }\n\n  // Handle other message types if needed\n  if (data.type === 'GET_VERSION') {\n    const replyPort = ports?.[0]\n    if (replyPort) {\n      // Send back current service worker version or timestamp\n      replyPort.postMessage({\n        version: '1.1.0', // You can make this dynamic based on build\n        timestamp: Date.now(),\n        success: true,\n      })\n    }\n  }\n})\n\n// Enhanced install event with better caching strategy\nself.addEventListener('install', (_event) => {\n  console.log('Service Worker: Installing new version')\n\n  // Skip waiting immediately if this is an update\n  if (self.registration?.waiting) {\n    console.log('Service Worker: Skipping waiting during install')\n    self.skipWaiting()\n  }\n})\n\n// Enhanced activate event with cleanup and immediate control\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker: Activating new version')\n\n  event.waitUntil(\n    Promise.all([\n      // Clean up old caches\n      caches.keys().then((cacheNames) => {\n        return Promise.all(\n          cacheNames.map((cacheName) => {\n            // Keep current workbox caches, remove old ones\n            if (\n              cacheName.startsWith('workbox-') &&\n              !cacheName.includes('temp')\n            ) {\n              // You might want to implement more sophisticated cache cleanup logic\n              console.log('Service Worker: Keeping cache:', cacheName)\n              return Promise.resolve()\n            }\n            return Promise.resolve()\n          }),\n        )\n      }),\n      // Take control of all clients immediately\n      self.clients.claim().then(() => {\n        console.log('Service Worker: Claimed all clients')\n\n        // Notify all clients that the service worker has been updated\n        return self.clients.matchAll().then((clients) => {\n          clients.forEach((client) => {\n            client.postMessage({\n              type: 'SW_UPDATED',\n              timestamp: Date.now(),\n            })\n          })\n        })\n      }),\n    ]),\n  )\n})\n\n// Handle unhandled promise rejections\nself.addEventListener('unhandledrejection', (_event) => {\n  console.error('Service Worker: Unhandled promise rejection:', _event.reason)\n})\n\n// Add performance logging for cache hits/misses\nself.addEventListener('fetch', (event) => {\n  // Only log for navigation requests in development\n  if (\n    event.request.mode === 'navigate' &&\n    self.location.hostname === 'localhost'\n  ) {\n    console.log('Service Worker: Navigation request for:', event.request.url)\n  }\n})\n\nconsole.log('Service Worker: Script loaded and ready')\n"]}